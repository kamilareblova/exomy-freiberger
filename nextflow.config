k8s {
   namespace = 'medgen-ns'
   runAsUser = 1000
   storageClaimName = 'pvc-713003-pospisilova-base'
   storageMountPath = '/mnt'
   pod = [ [volumeClaim: 'pvc-713004-genomics-freiberger', mountPath: "/freiberger" ]]
   homeDir = '/freiberger/Exom/src'
   launchDir = "${k8s.homeDir}/launch"
   projectDir = "${k8s.homeDir}/project"
   workDir = "${k8s.homeDir}/temp"
   computeResourceType = 'Job'
}

params {
   homeDir = '/freiberger/Exom/src'
   outDirectory = '/freiberger/Exom/data'
   projectDirectory = "${k8s.projectDir}/kamilareblova/exomy"
   ref = '/mnt/references/Homo_sapiens/GRCh38/full_only/GRCh38-p10'
   refindex = '/mnt/references/Homo_sapiens/GRCh38/full_only/GRCh38-p10'
   annovardb = '/mnt/references/Homo_sapiens/annovar/humandb-hg38'
   varbed = "${k8s.projectDir}/kamilareblova/exomy/beds/KAPA_HyperExome_hg38_cktch_v2.bed"
   varbed1 = "${k8s.projectDir}/kamilareblova/exomy/beds/pid_panel_2025_coverage_hg38.bed"
   teststrandbias = "${k8s.projectDir}/kamilareblova/exomy/scripts/teststrandbias.R"
   var2vcf_valid = "${k8s.projectDir}/kamilareblova/exomy/scripts/var2vcf_valid.pl"
   annovar = "${k8s.projectDir}/kamilareblova/exomy/scripts/table_annovar.pl"
   gene_fullxref.txt = "${k8s.projectDir}/kamilareblova/exomy/scripts/gene_fullxref.txt"
   convert2annovar.pl ="${k8s.projectDir}/kamilareblova/exomy/scripts/convert2annovar.pl"
   coding_change.pl ="${k8s.projectDir}/kamilareblova/exomy/scripts/coding_change.pl"
   annotate_variation.pl = "${k8s.projectDir}/kamilareblova/exomy/scripts/annotate_variation.pl"
}


executor {
   queueSize = 50
}


process {
   container = 'xreblova/exomy:v7'
   shell = ['/bin/bash', '-eo', 'pipefail']
   scratch = true
   executor = 'k8s'
   pod = [[securityContext:[fsGroupChangePolicy:'OnRootMismatch', allowPrivilegeEscalation:false, runAsUser:1000, runAsGroup:1, fsGroup:1, capabilities:[drop:['ALL']]]], [nodeSelector:'storage=local-ssd']]
   // errorStrategy = { task.exitStatus in [143,137,104,134,139,247, null, ''] ? 'retry' : 'finish' }
   errorStrategy = "finish"
  //  maxRetries = 3
   cpus = 1
   memory = '100GB'

   withLabel: xxs_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: xs_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: s_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: m_mem {
      memory = {10.GB * task.attempt * (3/4)}
   }
   withLabel: l_mem {
      memory = {100.GB * task.attempt * (3/4)}
   }
   withLabel: xl_mem {
      memory = {100.GB * task.attempt * (3/4)}
   }
   withLabel: s_cpu {
      cpus = 1
   }
   withLabel: m_cpu {
      cpus = 4
   }
   withLabel: l_cpu {
      cpus = 8
   }
}
